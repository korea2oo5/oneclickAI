{"ast":null,"code":"var _jsxFileName = \"E:\\\\react\\\\OneClickAI\\\\front\\\\components\\\\MachineLearning.jsx\";\nvar __jsx = React.createElement;\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\"; // import ml5 from \"ml5\";\n\nimport Webcam from \"react-webcam\";\nimport ProgressBar from \"./ProgressBar\";\nlet featureExtractor;\nlet options;\nlet classifier;\nlet result = [{}];\nlet ml5;\nexport default function MachineLearning() {\n  // console.log(\"Machine Learning code activated\");\n  const Data = useSelector(state => state.imgs[1].data);\n  const container = useSelector(state => state.imgs[0].container);\n  const {\n    0: imgSrc,\n    1: setImgSrc\n  } = useState(\"\"); // web cam image update\n\n  const classfyRef = useRef(null); // classfy setInterval\n\n  const webcamRef = useRef(null); // web cam ref\n\n  useEffect(() => {\n    console.log(\"ML: useEffect1\", container, container.length);\n    options = {\n      topk: Math.min(5, container.length),\n      numLabels: container.length\n    };\n    ml5 = require('ml5');\n    featureExtractor = ml5.featureExtractor(\"MobileNet\", options, modelLoaded);\n    classifier = featureExtractor.classification();\n  }, [Data]);\n\n  async function modelLoaded() {\n    console.log(\"ML: Model Ready!!!!!\"); // Add images and train them\n\n    if (Data.length != 0) {\n      await addImages();\n      train();\n    }\n  }\n\n  function addImages() {\n    console.log(\"ML: addImages\");\n    Data.map((data, idx) => classifier.addImage(document.getElementById(data.iid), data.label));\n  }\n\n  function train() {\n    classifier.train(function (lossValue) {\n      if (lossValue != null) {\n        console.log(\"Loss is\", lossValue);\n      } else {\n        console.log(\"Loss is\", lossValue);\n        console.log(\"training finished\");\n        classfyRef.current = setInterval(() => classify(), 400); // classify();\n      }\n    });\n  }\n\n  function classify() {\n    setImgSrc(webcamRef.current.getScreenshot());\n    classifier.classify(document.getElementById(\"classyShot\"), (err, res) => sorting(err, res));\n  }\n\n  function sorting(err, res) {\n    result = res; //큰값부터 작은값으로\n\n    let result2 = result.sort((a, b) => parseFloat(b.confidence) - parseFloat(a.confidence)); // 작은값부터 큰값으로\n\n    let result3 = result.sort((a, b) => a.label > b.label ? 1 : b.label > a.label ? -1 : 0);\n    console.log(\"result: \", result);\n    console.log(\"result2: \", result2);\n    console.log(\"result3: \", result3);\n  }\n\n  const containerStyles = {\n    border: \"1px solid black\",\n    width: \"400px\"\n  };\n  const webCamStyles = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\"\n  };\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }\n  }, __jsx(\"img\", {\n    src: imgSrc,\n    id: \"classyShot\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    style: containerStyles,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    style: webCamStyles,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }, __jsx(Webcam, {\n    audio: false,\n    ref: webcamRef,\n    screenshotFormat: \"image/jpeg\",\n    width: \"200\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }\n  })), result.map((item, idx) => __jsx(ProgressBar, {\n    key: idx,\n    id: idx,\n    completed: Math.round(item.confidence * 100),\n    label: item.label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 11\n    }\n  }))));\n}","map":{"version":3,"sources":["E:/react/OneClickAI/front/components/MachineLearning.jsx"],"names":["React","useRef","useState","useEffect","useSelector","Webcam","ProgressBar","featureExtractor","options","classifier","result","ml5","MachineLearning","Data","state","imgs","data","container","imgSrc","setImgSrc","classfyRef","webcamRef","console","log","length","topk","Math","min","numLabels","require","modelLoaded","classification","addImages","train","map","idx","addImage","document","getElementById","iid","label","lossValue","current","setInterval","classify","getScreenshot","err","res","sorting","result2","sort","a","b","parseFloat","confidence","result3","containerStyles","border","width","webCamStyles","display","flexDirection","alignItems","item","round"],"mappings":"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","sourcesContent":["import React, {\r\n  useRef,\r\n  useState,\r\n  useEffect,\r\n} from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n// import ml5 from \"ml5\";\r\nimport Webcam from \"react-webcam\";\r\nimport ProgressBar from \"./ProgressBar\";\r\n\r\nlet featureExtractor;\r\nlet options;\r\nlet classifier;\r\nlet result = [{}];\r\nlet ml5;\r\n\r\nexport default function MachineLearning() {\r\n  // console.log(\"Machine Learning code activated\");\r\n  const Data = useSelector((state) => state.imgs[1].data);\r\n  const container = useSelector((state) => state.imgs[0].container);\r\n  const [imgSrc, setImgSrc] = useState(\"\"); // web cam image update\r\n  const classfyRef = useRef(null); // classfy setInterval\r\n  const webcamRef = useRef(null); // web cam ref\r\n\r\n  useEffect(() => {\r\n    console.log(\"ML: useEffect1\", container, container.length);\r\n    options = {\r\n      topk: Math.min(5, container.length),\r\n      numLabels: container.length,\r\n    };\r\n    ml5 = require('ml5')\r\n    featureExtractor = ml5.featureExtractor(\"MobileNet\", options, modelLoaded);\r\n    classifier = featureExtractor.classification();\r\n  }, [Data]);\r\n\r\n  async function modelLoaded() {\r\n    console.log(\"ML: Model Ready!!!!!\");\r\n    // Add images and train them\r\n    if (Data.length != 0) {\r\n      await addImages();\r\n      train();\r\n    }\r\n  }\r\n\r\n  function addImages() {\r\n    console.log(\"ML: addImages\");\r\n    Data.map((data, idx) =>\r\n      classifier.addImage(document.getElementById(data.iid), data.label)\r\n    );\r\n  }\r\n\r\n  function train() {\r\n    classifier.train(function (lossValue) {\r\n      if (lossValue != null) {\r\n        console.log(\"Loss is\", lossValue);\r\n      } else {\r\n        console.log(\"Loss is\", lossValue);\r\n        console.log(\"training finished\");\r\n        classfyRef.current = setInterval(() => classify(), 400);\r\n        // classify();\r\n      }\r\n    });\r\n  }\r\n\r\n  function classify() {\r\n    setImgSrc(webcamRef.current.getScreenshot());\r\n    classifier.classify(document.getElementById(\"classyShot\"), (err, res) =>\r\n      sorting(err, res)\r\n    );\r\n  }\r\n\r\n  function sorting(err, res) {\r\n    result = res;\r\n    //큰값부터 작은값으로\r\n    let result2 = result.sort(\r\n      (a, b) => parseFloat(b.confidence) - parseFloat(a.confidence)\r\n    );\r\n    // 작은값부터 큰값으로\r\n    let result3 = result.sort((a, b) =>\r\n      a.label > b.label ? 1 : b.label > a.label ? -1 : 0\r\n    );\r\n    console.log(\"result: \", result);\r\n    console.log(\"result2: \", result2);\r\n    console.log(\"result3: \", result3);\r\n  }\r\n\r\n  const containerStyles = {\r\n    border: \"1px solid black\",\r\n    width: \"400px\",\r\n  };\r\n\r\n  const webCamStyles = {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <img src={imgSrc} id=\"classyShot\" />\r\n\r\n      <div style={containerStyles}>\r\n        <div style={webCamStyles}>\r\n          <Webcam\r\n            audio={false}\r\n            ref={webcamRef}\r\n            screenshotFormat=\"image/jpeg\"\r\n            width=\"200\"\r\n          />\r\n        </div>\r\n\r\n        {result.map((item, idx) => (\r\n          <ProgressBar\r\n            key={idx}\r\n            id={idx}\r\n            completed={Math.round(item.confidence * 100)}\r\n            label={item.label}\r\n          />\r\n        ))}\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}