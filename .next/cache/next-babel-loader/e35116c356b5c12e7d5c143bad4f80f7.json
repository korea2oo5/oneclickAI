{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\"; // iid: image id\n// id: container id\n\nvar lastiid = 5;\nvar lastid = 2;\nvar initialState1 = [{\n  // 처음에 데이터 모으는 곳, 추가, 삭제 가능\n  container: [{\n    id: 1,\n    label: \"\",\n    comment: \"\",\n    img: []\n  }, {\n    id: 2,\n    label: \"\",\n    comment: \"\",\n    img: []\n  } // {\n  //   id: 3,\n  //   label: \"\",\n  //   comment: \"\",\n  //   img: [],\n  // },\n  ]\n}, // 트레이닝에 사용될 데이터 포멧에 맞게 다시 모으는 곳\n{\n  data: []\n}];\nvar slice = createSlice({\n  name: \"imgs\",\n  initialState: initialState1,\n  reducers: {\n    //container add\n    containerAdd: function containerAdd(state, action) {\n      lastid += 1;\n      state[0].container.push({\n        id: lastid,\n        img: []\n      });\n    },\n    //container delete\n    containerDel: function containerDel(state, action) {\n      var remainContainer = state[0].container.filter(function (x) {\n        return x.id != action.payload.id;\n      });\n      state[0].container = remainContainer;\n    },\n    // img add\n    imgsAdd: function imgsAdd(state, action) {\n      lastiid += 1;\n      var chosenContainer = state[0].container.filter(function (x) {\n        return x.id == action.payload.id;\n      })[0];\n      var imgsrc = action.payload.src;\n      chosenContainer.img.push({\n        iid: lastiid,\n        src: imgsrc\n      });\n    },\n    // img delete\n    imgsDel: function imgsDel(state, action) {\n      var chosenContainer = state[0].container.filter(function (x) {\n        return x.id == action.payload.id;\n      })[0];\n      var modifImgList = chosenContainer.img.filter(function (x) {\n        return x.iid != action.payload.iid;\n      });\n      chosenContainer.img = modifImgList;\n    },\n    // input 아웃포커스 되면 label update\n    imgsLabelUpdate: function imgsLabelUpdate(state, action) {\n      var chosenContainer = state[0].container.filter(function (x) {\n        return x.id == action.payload.id;\n      })[0];\n      chosenContainer.label = action.payload.label;\n      console.log(JSON.stringify(chosenContainer));\n      console.log(action.payload.label);\n    },\n    imgsComUpdate: function imgsComUpdate(state, action) {\n      var chosenContainer = state[0].container.filter(function (x) {\n        return x.id == action.payload.id;\n      })[0];\n      chosenContainer.comment = action.payload.comment;\n      console.log(JSON.stringify(chosenContainer));\n      console.log(action.payload.coment);\n    },\n    // reformat data objects\n    // is this really necessary? i don't know\n    imgsCollect: function imgsCollect(state, action) {\n      console.log(\"Reducer: imgCollect\");\n      var newObj = state[0].container.map(function (x) {\n        return reformat(x);\n      });\n      state[1].data = newObj.flat(); // Object.assign(state[1].data, newObj.flat());\n      // console.log(JSON.stringify(state[1].data));\n      // console.log(\"Reducer: imgCollect done\");\n    }\n  }\n}); // Reducer\n\nexport default slice.reducer; // Actions\n\nvar _slice$actions = slice.actions,\n    containerAdd = _slice$actions.containerAdd,\n    containerDel = _slice$actions.containerDel,\n    imgsAdd = _slice$actions.imgsAdd,\n    imgsDel = _slice$actions.imgsDel,\n    imgsLabelUpdate = _slice$actions.imgsLabelUpdate,\n    imgsComUpdate = _slice$actions.imgsComUpdate,\n    imgsCollect = _slice$actions.imgsCollect;\nexport { containerAdd, containerDel, imgsAdd, imgsDel, imgsLabelUpdate, imgsComUpdate, imgsCollect };\n\nfunction reformat(input) {\n  var lab = input.label;\n  var img = input.img;\n  var com = input.comment;\n  var newObj = img.map(function (x) {\n    return Object.assign({}, x, {\n      label: lab,\n      iid: x.iid,\n      comment: com\n    });\n  });\n  return newObj;\n}","map":{"version":3,"sources":["E:/react/OneClickAI/front/reducers/imgs.jsx"],"names":["createSlice","lastiid","lastid","initialState1","container","id","label","comment","img","data","slice","name","initialState","reducers","containerAdd","state","action","push","containerDel","remainContainer","filter","x","payload","imgsAdd","chosenContainer","imgsrc","src","iid","imgsDel","modifImgList","imgsLabelUpdate","console","log","JSON","stringify","imgsComUpdate","coment","imgsCollect","newObj","map","reformat","flat","reducer","actions","input","lab","com","Object","assign"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\n// iid: image id\r\n// id: container id\r\nlet lastiid = 5;\r\nlet lastid = 2;\r\n\r\nconst initialState1 = [\r\n  {\r\n    // 처음에 데이터 모으는 곳, 추가, 삭제 가능\r\n    container: [\r\n      {\r\n        id: 1,\r\n        label: \"\",\r\n        comment: \"\",\r\n        img: [],\r\n      },\r\n      {\r\n        id: 2,\r\n        label: \"\",\r\n        comment: \"\",\r\n        img: [],\r\n      },\r\n      // {\r\n      //   id: 3,\r\n      //   label: \"\",\r\n      //   comment: \"\",\r\n      //   img: [],\r\n      // },\r\n    ],\r\n  },\r\n\r\n  // 트레이닝에 사용될 데이터 포멧에 맞게 다시 모으는 곳\r\n  {\r\n    data: [],\r\n  },\r\n];\r\n\r\nconst slice = createSlice({\r\n  name: \"imgs\",\r\n  initialState: initialState1,\r\n  reducers: {\r\n    //container add\r\n    containerAdd: (state, action) => {\r\n      lastid += 1;\r\n      state[0].container.push({ id: lastid, img: [] });\r\n    },\r\n\r\n    //container delete\r\n    containerDel: (state, action) => {\r\n      let remainContainer = state[0].container.filter(\r\n        (x) => x.id != action.payload.id\r\n      );\r\n      state[0].container = remainContainer;\r\n    },\r\n\r\n    // img add\r\n    imgsAdd: (state, action) => {\r\n      lastiid += 1;\r\n      let chosenContainer = state[0].container.filter(\r\n        (x) => x.id == action.payload.id\r\n      )[0];\r\n      let imgsrc = action.payload.src;\r\n      chosenContainer.img.push({ iid: lastiid, src: imgsrc });\r\n    },\r\n\r\n    // img delete\r\n    imgsDel: (state, action) => {\r\n      let chosenContainer = state[0].container.filter(\r\n        (x) => x.id == action.payload.id\r\n      )[0];\r\n      let modifImgList = chosenContainer.img.filter(\r\n        (x) => x.iid != action.payload.iid\r\n      );\r\n\r\n      chosenContainer.img = modifImgList;\r\n    },\r\n\r\n    // input 아웃포커스 되면 label update\r\n    imgsLabelUpdate: (state, action) => {\r\n      let chosenContainer = state[0].container.filter(\r\n        (x) => x.id == action.payload.id\r\n      )[0];\r\n      chosenContainer.label = action.payload.label;\r\n      console.log(JSON.stringify(chosenContainer));\r\n      console.log(action.payload.label);\r\n    },\r\n\r\n    imgsComUpdate: (state, action) => {\r\n      let chosenContainer = state[0].container.filter(\r\n        (x) => x.id == action.payload.id\r\n      )[0];\r\n      chosenContainer.comment = action.payload.comment;\r\n      console.log(JSON.stringify(chosenContainer));\r\n      console.log(action.payload.coment);\r\n    },\r\n\r\n    // reformat data objects\r\n    // is this really necessary? i don't know\r\n    imgsCollect: (state, action) => {\r\n      console.log(\"Reducer: imgCollect\");\r\n      let newObj = state[0].container.map((x) => reformat(x));\r\n      state[1].data = newObj.flat();\r\n      // Object.assign(state[1].data, newObj.flat());\r\n      // console.log(JSON.stringify(state[1].data));\r\n      // console.log(\"Reducer: imgCollect done\");\r\n    },\r\n  },\r\n});\r\n\r\n// Reducer\r\nexport default slice.reducer;\r\n\r\n// Actions\r\nexport const {\r\n  containerAdd,\r\n  containerDel,\r\n  imgsAdd,\r\n  imgsDel,\r\n  imgsLabelUpdate,\r\n  imgsComUpdate,\r\n  imgsCollect,\r\n} = slice.actions;\r\n\r\nfunction reformat(input) {\r\n  let lab = input.label;\r\n  let img = input.img;\r\n  let com = input.comment;\r\n  let newObj = img.map((x) =>\r\n    Object.assign({}, x, { label: lab, iid: x.iid, comment: com })\r\n  );\r\n  return newObj;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}