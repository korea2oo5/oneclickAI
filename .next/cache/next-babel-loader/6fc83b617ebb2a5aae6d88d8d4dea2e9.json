{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"E:\\\\react\\\\OneClickAI\\\\front\\\\components\\\\MachineLearning.jsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport ml5 from \"ml5\";\nimport Webcam from \"react-webcam\";\nimport ProgressBar from \"./ProgressBar\";\nvar featureExtractor;\nvar options;\nvar classifier;\nvar result = [{}];\nexport default function MachineLearning() {\n  _s();\n\n  var _this = this;\n\n  // console.log(\"Machine Learning code activated\");\n  var Data = useSelector(function (state) {\n    return state.imgs[1].data;\n  });\n  var container = useSelector(function (state) {\n    return state.imgs[0].container;\n  });\n\n  var _useState = useState(\"\"),\n      imgSrc = _useState[0],\n      setImgSrc = _useState[1]; // web cam image update\n\n\n  var classfyRef = useRef(null); // classfy setInterval\n\n  var webcamRef = useRef(null); // web cam ref\n\n  useEffect(function () {\n    console.log(\"ML: useEffect1\", container, container.length);\n    options = {\n      topk: Math.min(5, container.length),\n      numLabels: container.length\n    };\n\n    if (true) {\n      // it's safe to use window now\n      featureExtractor = ml5.featureExtractor(\"MobileNet\", options, modelLoaded);\n    }\n\n    classifier = featureExtractor.classification();\n  }, [Data]);\n\n  function modelLoaded() {\n    return _modelLoaded.apply(this, arguments);\n  }\n\n  function _modelLoaded() {\n    _modelLoaded = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              console.log(\"ML: Model Ready!!!!!\"); // Add images and train them\n\n              if (!(Data.length != 0)) {\n                _context.next = 5;\n                break;\n              }\n\n              _context.next = 4;\n              return addImages();\n\n            case 4:\n              train();\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _modelLoaded.apply(this, arguments);\n  }\n\n  function addImages() {\n    console.log(\"ML: addImages\");\n    Data.map(function (data, idx) {\n      return classifier.addImage(document.getElementById(data.iid), data.label);\n    });\n  }\n\n  function train() {\n    classifier.train(function (lossValue) {\n      if (lossValue != null) {\n        console.log(\"Loss is\", lossValue);\n      } else {\n        console.log(\"Loss is\", lossValue);\n        console.log(\"training finished\");\n        classfyRef.current = setInterval(function () {\n          return classify();\n        }, 1000); // classify();\n      }\n    });\n  }\n\n  function classify() {\n    setImgSrc(webcamRef.current.getScreenshot());\n    classifier.classify(document.getElementById(\"classyShot\"), function (err, res) {\n      return sorting(err, res);\n    });\n  }\n\n  function sorting(err, res) {\n    result = res; //큰값부터 작은값으로\n\n    var result2 = result.sort(function (a, b) {\n      return parseFloat(b.confidence) - parseFloat(a.confidence);\n    }); // 작은값부터 큰값으로\n\n    var result3 = result.sort(function (a, b) {\n      return a.label > b.label ? 1 : b.label > a.label ? -1 : 0;\n    });\n    console.log(\"result: \", result);\n    console.log(\"result2: \", result2);\n    console.log(\"result3: \", result3);\n  }\n\n  var containerStyles = {\n    border: \"1px solid black\",\n    width: \"400px\"\n  };\n  var webCamStyles = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\"\n  };\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 5\n    }\n  }, __jsx(\"img\", {\n    src: imgSrc,\n    id: \"classyShot\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    style: containerStyles,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    style: webCamStyles,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }, __jsx(Webcam, {\n    audio: false,\n    ref: webcamRef,\n    screenshotFormat: \"image/jpeg\",\n    width: \"200\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  })), result.map(function (item, idx) {\n    return __jsx(ProgressBar, {\n      key: idx,\n      id: idx,\n      completed: Math.round(item.confidence * 100),\n      label: item.label,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }\n    });\n  })));\n}\n\n_s(MachineLearning, \"rvyt86u46H8FPADtxbwI1NO+0L8=\", false, function () {\n  return [useSelector, useSelector];\n});\n\n_c = MachineLearning;\n\nvar _c;\n\n$RefreshReg$(_c, \"MachineLearning\");","map":{"version":3,"sources":["E:/react/OneClickAI/front/components/MachineLearning.jsx"],"names":["React","useRef","useState","useEffect","useSelector","useDispatch","ml5","Webcam","ProgressBar","featureExtractor","options","classifier","result","MachineLearning","Data","state","imgs","data","container","imgSrc","setImgSrc","classfyRef","webcamRef","console","log","length","topk","Math","min","numLabels","modelLoaded","classification","addImages","train","map","idx","addImage","document","getElementById","iid","label","lossValue","current","setInterval","classify","getScreenshot","err","res","sorting","result2","sort","a","b","parseFloat","confidence","result3","containerStyles","border","width","webCamStyles","display","flexDirection","alignItems","item","round"],"mappings":"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","sourcesContent":["import React, {\r\n  useRef,\r\n  useState,\r\n  useEffect,\r\n} from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport ml5 from \"ml5\";\r\nimport Webcam from \"react-webcam\";\r\nimport ProgressBar from \"./ProgressBar\";\r\n\r\nlet featureExtractor;\r\nlet options;\r\nlet classifier;\r\nlet result = [{}];\r\n\r\nexport default function MachineLearning() {\r\n  // console.log(\"Machine Learning code activated\");\r\n  const Data = useSelector((state) => state.imgs[1].data);\r\n  const container = useSelector((state) => state.imgs[0].container);\r\n  const [imgSrc, setImgSrc] = useState(\"\"); // web cam image update\r\n  const classfyRef = useRef(null); // classfy setInterval\r\n  const webcamRef = useRef(null); // web cam ref\r\n\r\n  useEffect(() => {\r\n    console.log(\"ML: useEffect1\", container, container.length);\r\n    options = {\r\n      topk: Math.min(5, container.length),\r\n      numLabels: container.length,\r\n    };\r\n    if (typeof window !== 'undefined') {\r\n      // it's safe to use window now\r\n      featureExtractor = ml5.featureExtractor(\"MobileNet\", options, modelLoaded);\r\n    }\r\n    classifier = featureExtractor.classification();\r\n  }, [Data]);\r\n\r\n  async function modelLoaded() {\r\n    console.log(\"ML: Model Ready!!!!!\");\r\n    // Add images and train them\r\n    if (Data.length != 0) {\r\n      await addImages();\r\n      train();\r\n    }\r\n  }\r\n\r\n  function addImages() {\r\n    console.log(\"ML: addImages\");\r\n    Data.map((data, idx) =>\r\n      classifier.addImage(document.getElementById(data.iid), data.label)\r\n    );\r\n  }\r\n\r\n  function train() {\r\n    classifier.train(function (lossValue) {\r\n      if (lossValue != null) {\r\n        console.log(\"Loss is\", lossValue);\r\n      } else {\r\n        console.log(\"Loss is\", lossValue);\r\n        console.log(\"training finished\");\r\n        classfyRef.current = setInterval(() => classify(), 1000);\r\n        // classify();\r\n      }\r\n    });\r\n  }\r\n\r\n  function classify() {\r\n    setImgSrc(webcamRef.current.getScreenshot());\r\n    classifier.classify(document.getElementById(\"classyShot\"), (err, res) =>\r\n      sorting(err, res)\r\n    );\r\n  }\r\n\r\n  function sorting(err, res) {\r\n    result = res;\r\n    //큰값부터 작은값으로\r\n    let result2 = result.sort(\r\n      (a, b) => parseFloat(b.confidence) - parseFloat(a.confidence)\r\n    );\r\n    // 작은값부터 큰값으로\r\n    let result3 = result.sort((a, b) =>\r\n      a.label > b.label ? 1 : b.label > a.label ? -1 : 0\r\n    );\r\n    console.log(\"result: \", result);\r\n    console.log(\"result2: \", result2);\r\n    console.log(\"result3: \", result3);\r\n  }\r\n\r\n  const containerStyles = {\r\n    border: \"1px solid black\",\r\n    width: \"400px\",\r\n  };\r\n\r\n  const webCamStyles = {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <img src={imgSrc} id=\"classyShot\" />\r\n\r\n      <div style={containerStyles}>\r\n        <div style={webCamStyles}>\r\n          <Webcam\r\n            audio={false}\r\n            ref={webcamRef}\r\n            screenshotFormat=\"image/jpeg\"\r\n            width=\"200\"\r\n          />\r\n        </div>\r\n\r\n        {result.map((item, idx) => (\r\n          <ProgressBar\r\n            key={idx}\r\n            id={idx}\r\n            completed={Math.round(item.confidence * 100)}\r\n            label={item.label}\r\n          />\r\n        ))}\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}