{"ast":null,"code":"var _jsxFileName = \"E:\\\\react\\\\OneClickAI\\\\front\\\\components\\\\ImgGenerate.jsx\";\nvar __jsx = React.createElement;\nimport React, { Component, useRef, useState, useEffect, useCallback } from \"react\";\nimport { imgsAdd, imgsDel, containerDel, imgsLabelUpdate, imgsComUpdate } from \"../reducers/imgs\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Webcam from \"react-webcam\";\nexport default function BtnGenerate({\n  id\n}) {\n  console.log(\"ImgGenerate Initiallised container: \", id);\n  const container = useSelector(state => state.imgs[0].container);\n  const dispatch = useDispatch();\n  let contId = id; // 컨테이너 아이디를 재정의... 필요한가?\n\n  let imgSrc; // 웹캠으로 찍히는 사진 변수\n\n  let labelInputId = \"labelHolder\" + contId.toString(); // input에 필요한 unique id, key를 이런식으로 만듬\n\n  let comInputId = \"comHolder\" + contId.toString(); // input에 필요한 unique id, key를 이런식으로 만듬\n\n  const chosenContainer = container.filter(obj => obj.id == contId);\n  const chosenImgSet = chosenContainer[0].img;\n  const webcamRef = useRef(null);\n  const intervalRef = useRef(null); // image capture 진행\n\n  const capture = useCallback(() => {\n    console.log(\"ImgGenerate: img capture activated\");\n    imgSrc = webcamRef.current.getScreenshot();\n    dispatch(imgsAdd({\n      id: contId,\n      src: imgSrc\n    }));\n  }, [imgSrc]); // capture를 여러번 동작시키기 위해 pressHold 만듬\n\n  const pressHold = useCallback(() => {\n    console.log(\"ImgGenerate: PressHold Activated\");\n    capture();\n    intervalRef.current = setInterval(capture, 100);\n  }, [imgSrc]); // 누르면 삭제\n\n  function ContainerDel() {\n    console.log(\"ImgGenerate: DeleteContainer\");\n    dispatch(containerDel({\n      id: contId\n    }));\n  } // 라벨 업데이트\n\n\n  function ImgLabelUpdate() {\n    console.log(\"ImgGenerate: Labels will be updated!!\");\n    let label = document.getElementById(labelInputId).value;\n    dispatch(imgsLabelUpdate({\n      id: contId,\n      label: label\n    }));\n  } // comment 업데이트\n\n\n  function ImgComUpdate() {\n    console.log(\"ImgGenerate: A Comment is updated!!\");\n    let comment = document.getElementById(comInputId).value;\n    dispatch(imgsComUpdate({\n      id: contId,\n      comment: comment\n    }));\n  }\n\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, __jsx(\"input\", {\n    type: \"text\",\n    id: labelInputId,\n    placeholder: \"Label here\",\n    onBlur: ImgLabelUpdate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }), __jsx(\"input\", {\n    type: \"text\",\n    id: comInputId,\n    placeholder: \"Comment here\",\n    onBlur: ImgComUpdate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }), __jsx(\"button\", {\n    onClick: ContainerDel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, \"Delete This container\"), __jsx(Webcam, {\n    audio: false,\n    ref: webcamRef,\n    screenshotFormat: \"image/jpeg\",\n    width: \"200\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }), __jsx(\"button\", {\n    onMouseDown: pressHold,\n    onMouseUp: () => clearInterval(intervalRef.current),\n    onMouseLeave: () => clearInterval(intervalRef.current),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, \"Capture photo\"), chosenImgSet.map(imgs => __jsx(\"img\", {\n    key: imgs.iid,\n    id: imgs.iid,\n    src: imgs.src,\n    width: \"100\",\n    onClick: () => dispatch(imgsDel({\n      id: contId,\n      iid: imgs.iid\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  }))));\n}","map":{"version":3,"sources":["E:/react/OneClickAI/front/components/ImgGenerate.jsx"],"names":["React","Component","useRef","useState","useEffect","useCallback","imgsAdd","imgsDel","containerDel","imgsLabelUpdate","imgsComUpdate","useSelector","useDispatch","Webcam","BtnGenerate","id","console","log","container","state","imgs","dispatch","contId","imgSrc","labelInputId","toString","comInputId","chosenContainer","filter","obj","chosenImgSet","img","webcamRef","intervalRef","capture","current","getScreenshot","src","pressHold","setInterval","ContainerDel","ImgLabelUpdate","label","document","getElementById","value","ImgComUpdate","comment","clearInterval","map","iid"],"mappings":"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","sourcesContent":["import React, {\r\n  Component,\r\n  useRef,\r\n  useState,\r\n  useEffect,\r\n  useCallback,\r\n} from \"react\";\r\nimport {\r\n  imgsAdd,\r\n  imgsDel,\r\n  containerDel,\r\n  imgsLabelUpdate,\r\n  imgsComUpdate,\r\n} from \"../reducers/imgs\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport Webcam from \"react-webcam\";\r\n\r\nexport default function BtnGenerate({ id }) {\r\n  console.log(\"ImgGenerate Initiallised container: \", id);\r\n  const container = useSelector((state) => state.imgs[0].container);\r\n  const dispatch = useDispatch();\r\n\r\n  let contId = id; // 컨테이너 아이디를 재정의... 필요한가?\r\n  let imgSrc; // 웹캠으로 찍히는 사진 변수\r\n  let labelInputId = \"labelHolder\" + contId.toString(); // input에 필요한 unique id, key를 이런식으로 만듬\r\n  let comInputId = \"comHolder\" + contId.toString(); // input에 필요한 unique id, key를 이런식으로 만듬\r\n\r\n  const chosenContainer = container.filter((obj) => obj.id == contId);\r\n  const chosenImgSet = chosenContainer[0].img;\r\n\r\n  const webcamRef = useRef(null);\r\n  const intervalRef = useRef(null);\r\n\r\n  // image capture 진행\r\n  const capture = useCallback(() => {\r\n    console.log(\"ImgGenerate: img capture activated\");\r\n    imgSrc = webcamRef.current.getScreenshot();\r\n    dispatch(imgsAdd({ id: contId, src: imgSrc }));\r\n  }, [imgSrc]);\r\n\r\n  // capture를 여러번 동작시키기 위해 pressHold 만듬\r\n  const pressHold = useCallback(() => {\r\n    console.log(\"ImgGenerate: PressHold Activated\");\r\n    capture();\r\n    intervalRef.current = setInterval(capture, 100);\r\n  }, [imgSrc]);\r\n\r\n  // 누르면 삭제\r\n  function ContainerDel() {\r\n    console.log(\"ImgGenerate: DeleteContainer\");\r\n    dispatch(containerDel({ id: contId }));\r\n  }\r\n\r\n  // 라벨 업데이트\r\n  function ImgLabelUpdate() {\r\n    console.log(\"ImgGenerate: Labels will be updated!!\");\r\n    let label = document.getElementById(labelInputId).value;\r\n    dispatch(imgsLabelUpdate({ id: contId, label: label }));\r\n  }\r\n\r\n  // comment 업데이트\r\n  function ImgComUpdate() {\r\n    console.log(\"ImgGenerate: A Comment is updated!!\");\r\n    let comment = document.getElementById(comInputId).value;\r\n    dispatch(imgsComUpdate({ id: contId, comment: comment }));\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          id={labelInputId}\r\n          placeholder=\"Label here\"\r\n          onBlur={ImgLabelUpdate}\r\n        ></input>\r\n\r\n        <input\r\n          type=\"text\"\r\n          id={comInputId}\r\n          placeholder=\"Comment here\"\r\n          onBlur={ImgComUpdate}\r\n        ></input>\r\n\r\n        <button onClick={ContainerDel}>Delete This container</button>\r\n\r\n        <Webcam\r\n          audio={false}\r\n          ref={webcamRef}\r\n          screenshotFormat=\"image/jpeg\"\r\n          width=\"200\"\r\n        />\r\n\r\n        <button\r\n          onMouseDown={pressHold}\r\n          onMouseUp={() => clearInterval(intervalRef.current)}\r\n          onMouseLeave={() => clearInterval(intervalRef.current)}\r\n        >\r\n          Capture photo\r\n        </button>\r\n\r\n        {chosenImgSet.map((imgs) => (\r\n          <img\r\n            key={imgs.iid}\r\n            id={imgs.iid}\r\n            src={imgs.src}\r\n            width=\"100\"\r\n            onClick={() => dispatch(imgsDel({ id: contId, iid: imgs.iid }))}\r\n          />\r\n        ))}\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}